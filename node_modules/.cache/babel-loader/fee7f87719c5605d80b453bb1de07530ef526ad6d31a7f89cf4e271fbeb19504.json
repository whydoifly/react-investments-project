{"ast":null,"code":"var _jsxFileName = \"/Users/arkadii/Documents/GitHub/react-investments-project/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Header from './components/Header/Header';\nimport InvestForm from './components/InvestForm/InvestForm';\nimport InvestTable from './components/InvestTable/InvestTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialUserInput = {\n  'current-savings': 0,\n  'yearly-contribution': 0,\n  'expected-return': 0,\n  duration: 0\n};\nfunction App() {\n  _s();\n  const [results, setResults] = useState(null);\n  const [userInput, setUserInput] = useState(initialUserInput);\n  const handleCalculate = userInput => {\n    setUserInput(userInput);\n  };\n  const yearlyData = [];\n  if (userInput) {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setResults(yearlyData);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestForm, {\n      onCalculate: handleCalculate,\n      dat: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No investment calculated yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(InvestTable, {\n      data: yearlyData,\n      initialInvestment: userInput['current-savings']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"u2mgbfgwLuQ4LDC+W8r3xZgBy+A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","InvestForm","InvestTable","jsxDEV","_jsxDEV","initialUserInput","duration","App","_s","results","setResults","userInput","setUserInput","handleCalculate","yearlyData","currentSavings","yearlyContribution","expectedReturn","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","dat","data","initialInvestment","_c","$RefreshReg$"],"sources":["/Users/arkadii/Documents/GitHub/react-investments-project/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport Header from './components/Header/Header';\nimport InvestForm from './components/InvestForm/InvestForm';\nimport InvestTable from './components/InvestTable/InvestTable';\n\nconst initialUserInput = {\n  'current-savings': 0,\n  'yearly-contribution': 0,\n  'expected-return': 0,\n  duration: 0,\n};\n\n\nfunction App() {\n  const [results, setResults] = useState(null);\n  const [userInput, setUserInput] = useState(initialUserInput);\n\n  const handleCalculate = (userInput) => {\n    setUserInput(userInput);\n  };\n\n  const yearlyData = []; \n\n  if (userInput) {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    setResults(yearlyData);\n  }\n  return (\n    <div>\n      <Header />\n\n      <InvestForm onCalculate={handleCalculate} dat />\n\n      {!userInput && <p>No investment calculated yet.</p>}\n      {userInput && (\n        <InvestTable\n          data={yearlyData}\n          initialInvestment={userInput['current-savings']}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,MAAM,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,gBAAgB,GAAG;EACvB,iBAAiB,EAAE,CAAC;EACpB,qBAAqB,EAAE,CAAC;EACxB,iBAAiB,EAAE,CAAC;EACpBC,QAAQ,EAAE;AACZ,CAAC;AAGD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAACM,gBAAgB,CAAC;EAE5D,MAAMQ,eAAe,GAAIF,SAAS,IAAK;IACrCC,YAAY,CAACD,SAAS,CAAC;EACzB,CAAC;EAED,MAAMG,UAAU,GAAG,EAAE;EAErB,IAAIH,SAAS,EAAE;IACb;IACA;;IAEA,IAAII,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAML,QAAQ,GAAG,CAACK,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,QAAQ,EAAEY,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGJ,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAII,cAAc,GAAGH,kBAAkB;MACrDF,UAAU,CAACM,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEP,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IAEAN,UAAU,CAACI,UAAU,CAAC;EACxB;EACA,oBACEV,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACJ,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVvB,OAAA,CAACH,UAAU;MAAC2B,WAAW,EAAEf,eAAgB;MAACgB,GAAG;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAE/C,CAAChB,SAAS,iBAAIP,OAAA;MAAAmB,QAAA,EAAG;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAClDhB,SAAS,iBACRP,OAAA,CAACF,WAAW;MACV4B,IAAI,EAAEhB,UAAW;MACjBiB,iBAAiB,EAAEpB,SAAS,CAAC,iBAAiB;IAAE;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnB,EAAA,CAjDQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}