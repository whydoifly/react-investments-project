{"ast":null,"code":"var _jsxFileName = \"/Users/arkadii/Documents/GitHub/react-investments-project/src/components/UI/ActionButtons.js\";\nimport React from 'react';\nimport styles from './ActionButtons.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionButtons = props => {\n  console.log(props);\n  const handleCalculate = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: styles.actions,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"reset\",\n      className: styles.buttonAlt,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: handleCalculate(props.data),\n      className: styles.button,\n      children: \"Calculate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_c = ActionButtons;\nexport default ActionButtons;\nvar _c;\n$RefreshReg$(_c, \"ActionButtons\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","ActionButtons","props","console","log","handleCalculate","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","className","actions","children","type","buttonAlt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","data","button","_c","$RefreshReg$"],"sources":["/Users/arkadii/Documents/GitHub/react-investments-project/src/components/UI/ActionButtons.js"],"sourcesContent":["import React from 'react';\n\nimport styles from './ActionButtons.module.css';\n\nconst ActionButtons = (props) => {\n  console.log(props)\n  const handleCalculate = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n  console.log(props)\n  return (\n    <p className={styles.actions}>\n      <button type='reset' className={styles.buttonAlt}>\n        Reset\n      </button>\n      <button\n        type='submit'\n        onClick={handleCalculate(props.data)}\n        className={styles.button}>\n        Calculate\n      </button>\n    </p>\n  );\n};\n\nexport default ActionButtons;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC/BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,MAAMG,eAAe,GAAIC,SAAS,IAAK;IACrC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EACDN,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,oBACEF,OAAA;IAAGiB,SAAS,EAAEnB,MAAM,CAACoB,OAAQ;IAAAC,QAAA,gBAC3BnB,OAAA;MAAQoB,IAAI,EAAC,OAAO;MAACH,SAAS,EAAEnB,MAAM,CAACuB,SAAU;MAAAF,QAAA,EAAC;IAElD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTzB,OAAA;MACEoB,IAAI,EAAC,QAAQ;MACbM,OAAO,EAAErB,eAAe,CAACH,KAAK,CAACyB,IAAI,CAAE;MACrCV,SAAS,EAAEnB,MAAM,CAAC8B,MAAO;MAAAT,QAAA,EAAC;IAE5B;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAER,CAAC;AAACI,EAAA,GA1CI5B,aAAa;AA4CnB,eAAeA,aAAa;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}